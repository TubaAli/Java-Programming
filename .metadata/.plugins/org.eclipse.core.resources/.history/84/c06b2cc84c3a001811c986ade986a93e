package BinaryTrees;

import java.util.*;

public class AVL {
	public class Node {
		int data;
		Node left = null;
		Node right = null;
		int height = 0;
	}

	private Node root;
	private int size;

	public int size() {
		return size;
	}

	public AVL(int[] arr) {
		this.root = this.construct(arr, 0, arr.length - 1);
	}

	public Node construct(int[] arr, int lo, int hi) {
		if (lo > hi) {
			return null;
		}

		Node node = new Node();
		int mid = (lo + hi) / 2;
		node.data = arr[mid];

		node.left = construct(arr, lo, mid - 1);
		node.right = construct(arr, mid + 1, hi);
		node.height = Math.max(node.left==null?0 : node.left.height+1 , node.right==null?0:node.right.height+1);
		
		return node;
	}

	public int searchByIn(int[] in, int isi, int iei, int data) {
		for (int i = isi; i <= iei; i++) {
			if (in[i] == data) {
				return i;
			}
		}
		return -1;
	}

	public boolean isEmpty() {
		return size() == 0;
	}

	public void display() {
		display(root);
	}

	private void display(Node node) {

		if (node == null) {
			return;
		}

		String str = "";
		if (node.left == null) {
			str += " .=> ";
		} else {
			str += node.left.data + " => ";
		}
		str += node.data;
		if (node.right == null) {
			str += " <=. ";
		} else {
			str += " <= " + node.right.data;
		}

		System.out.println();
		System.out.println(str);
		display(node.left);
		display(node.right);
	}

	public int size2() {
		return size2(root);
	}

	private int size2(Node child) {
		if (child == null) {
			return 0;
		}
		return size2(child.left) + 1 + size2(child.right);
	}

	public int max() {
		return max(root);
	}

	private int max(Node node) {
		if (node.right != null) {
			return max(node.right);
		} else {
			return node.data;
		}
	}
}
