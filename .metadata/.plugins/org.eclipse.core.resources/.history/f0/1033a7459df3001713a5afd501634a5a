package lecture_15;

public class RecursionDiff {

	public static void main(String[] args) {
		boolean[][] board = new boolean[4][4];
		printNQueens(board, 0, 0, "");
		System.out.println(counter);
	}
static int counter = 0;

	private static void printNQueens(boolean[][] board, int boxNum, int qpsf, String csf) {
		if (qpsf == board.length) {
			if(isBoardValid(board)){
				System.out.println(csf);
			}
			counter++;
			return;
		}
		for (int box = boxNum; box < board.length*board.length; box++) {
			int row = box / board.length;
			int col = box % board.length;
			board[row][col]=true;
			printNQueens(board, box+1, qpsf + 1, "["+row+","+col+"]"+"-");
			board[row][col]=false;
		}
	}

	private static boolean isBoardValid(boolean[][] board) {
		for(int row=0; row<board.length; row++){
			for(int col=0; col<board[0].length; col++){
				if((board[row][col] && isQueenValid(board,row,col))==false){
					return false;
				}
			}
		}
		return true;
	}

	private static boolean isQueenValid(boolean[][] board, int row, int col) {
		//row checking
		for(int i=0; i<col; i++){
			if(board[row][i]==true){
				return false;
			}
		}
		//col checking
		for(int i=0; i<row; i++){
			if(board[i][col]==true){
				return false;
			}
		}
		//checking left diagonal
		int i=row, j=col;
		while(i>=0 && j>=0){
			if(board[row][col]==true){
				return false;
			}
			i--;
			j--;
		}
		//checking right diagonal
		i=row;
		j=col;
		while(i>=0 && j<board.length){
			if(board[row][col]==true){
				return false;
			}
			i--;
			j++;
		}
		return true;
	}

	private static boolean printNextQueen(boolean[][] board, int boxNum, int length) {
		if()
		return false;
	}
}
